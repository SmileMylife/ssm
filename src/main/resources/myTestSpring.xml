<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <!--&lt;!&ndash;云南数据源&ndash;&gt;-->
    <!--<bean id="ngwf_yn_sit" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">-->
        <!--<property name="driverClassName" value="${YNjdbc.driver}"/>-->
        <!--<property name="url" value="${YNjdbc.url}"/>-->
        <!--<property name="username" value="${YNjdbc.username}"/>-->
        <!--<property name="password" value="${YNjdbc.password}"/>-->
        <!--&lt;!&ndash; 连接池启动时的初始值 &ndash;&gt;-->
        <!--<property name="initialSize" value="${YNjdbc.initialSize}"/>-->
        <!--&lt;!&ndash; 连接池的最大值 &ndash;&gt;-->
        <!--<property name="maxActive" value="${YNjdbc.maxActive}"/>-->
        <!--&lt;!&ndash; 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 &ndash;&gt;-->
        <!--<property name="maxIdle" value="${YNjdbc.maxIdle}"/>-->
        <!--&lt;!&ndash; 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 &ndash;&gt;-->
        <!--<property name="minIdle" value="${YNjdbc.minIdle}"/>-->
        <!--&lt;!&ndash; 最大建立连接等待时间。如果超过此时间将接到异常。设为－1表示无限制 &ndash;&gt;-->
        <!--<property name="maxWait" value="${YNjdbc.maxWait}"/>-->
        <!--&lt;!&ndash;#给出一条简单的sql语句进行验证 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="validationQuery" value="select getdate()" />&ndash;&gt;-->
        <!--<property name="defaultAutoCommit" value="${YNjdbc.defaultAutoCommit}"/>-->
        <!--&lt;!&ndash; 回收被遗弃的（一般是忘了释放的）数据库连接到连接池中 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="removeAbandoned" value="true" />&ndash;&gt;-->
        <!--&lt;!&ndash; 数据库连接过多长时间不用将被视为被遗弃而收回连接池中 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="removeAbandonedTimeout" value="120" />&ndash;&gt;-->
        <!--&lt;!&ndash; #连接的超时时间，默认为半小时。 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="${YNjdbc.minEvictableIdleTimeMillis}"/>-->
        <!--&lt;!&ndash;# 失效检查线程运行时间间隔，要小于MySQL默认&ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="40000"/>-->
        <!--&lt;!&ndash;# 检查连接是否有效&ndash;&gt;-->
        <!--<property name="testWhileIdle" value="true"/>-->
        <!--&lt;!&ndash;# 检查连接有效性的SQL语句&ndash;&gt;-->
        <!--<property name="validationQuery" value="SELECT 1 FROM dual"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash;天津数据源&ndash;&gt;-->
    <!--<bean id="ngwf_tj_sit" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">-->
        <!--<property name="driverClassName" value="${TJjdbc.driver}"/>-->
        <!--<property name="url" value="${TJjdbc.url}"/>-->
        <!--<property name="username" value="${TJjdbc.username}"/>-->
        <!--<property name="password" value="${TJjdbc.password}"/>-->
        <!--&lt;!&ndash; 连接池启动时的初始值 &ndash;&gt;-->
        <!--<property name="initialSize" value="${TJjdbc.initialSize}"/>-->
        <!--&lt;!&ndash; 连接池的最大值 &ndash;&gt;-->
        <!--<property name="maxActive" value="${TJjdbc.maxActive}"/>-->
        <!--&lt;!&ndash; 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 &ndash;&gt;-->
        <!--<property name="maxIdle" value="${TJjdbc.maxIdle}"/>-->
        <!--&lt;!&ndash; 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 &ndash;&gt;-->
        <!--<property name="minIdle" value="${TJjdbc.minIdle}"/>-->
        <!--&lt;!&ndash; 最大建立连接等待时间。如果超过此时间将接到异常。设为－1表示无限制 &ndash;&gt;-->
        <!--<property name="maxWait" value="${TJjdbc.maxWait}"/>-->
        <!--&lt;!&ndash;#给出一条简单的sql语句进行验证 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="validationQuery" value="select getdate()" />&ndash;&gt;-->
        <!--<property name="defaultAutoCommit" value="${TJjdbc.defaultAutoCommit}"/>-->
        <!--&lt;!&ndash; 回收被遗弃的（一般是忘了释放的）数据库连接到连接池中 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="removeAbandoned" value="true" />&ndash;&gt;-->
        <!--&lt;!&ndash; 数据库连接过多长时间不用将被视为被遗弃而收回连接池中 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="removeAbandonedTimeout" value="120" />&ndash;&gt;-->
        <!--&lt;!&ndash; #连接的超时时间，默认为半小时。 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="${TJjdbc.minEvictableIdleTimeMillis}"/>-->
        <!--&lt;!&ndash;# 失效检查线程运行时间间隔，要小于MySQL默认&ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="40000"/>-->
        <!--&lt;!&ndash;# 检查连接是否有效&ndash;&gt;-->
        <!--<property name="testWhileIdle" value="true"/>-->
        <!--&lt;!&ndash;# 检查连接有效性的SQL语句&ndash;&gt;-->
        <!--<property name="validationQuery" value="SELECT 1 FROM dual"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash;商城数据源&ndash;&gt;-->
    <!--<bean id="store" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">-->
        <!--<property name="driverClassName" value="${Storejdbc.driver}"/>-->
        <!--<property name="url" value="${Storejdbc.url}"/>-->
        <!--<property name="username" value="${Storejdbc.username}"/>-->
        <!--<property name="password" value="${Storejdbc.password}"/>-->
        <!--&lt;!&ndash; 连接池启动时的初始值 &ndash;&gt;-->
        <!--<property name="initialSize" value="${Storejdbc.initialSize}"/>-->
        <!--&lt;!&ndash; 连接池的最大值 &ndash;&gt;-->
        <!--<property name="maxActive" value="${Storejdbc.maxActive}"/>-->
        <!--&lt;!&ndash; 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 &ndash;&gt;-->
        <!--<property name="maxIdle" value="${Storejdbc.maxIdle}"/>-->
        <!--&lt;!&ndash; 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 &ndash;&gt;-->
        <!--<property name="minIdle" value="${Storejdbc.minIdle}"/>-->
        <!--&lt;!&ndash; 最大建立连接等待时间。如果超过此时间将接到异常。设为－1表示无限制 &ndash;&gt;-->
        <!--<property name="maxWait" value="${Storejdbc.maxWait}"/>-->
        <!--&lt;!&ndash;#给出一条简单的sql语句进行验证 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="validationQuery" value="select getdate()" />&ndash;&gt;-->
        <!--<property name="defaultAutoCommit" value="${Storejdbc.defaultAutoCommit}"/>-->
        <!--&lt;!&ndash; 回收被遗弃的（一般是忘了释放的）数据库连接到连接池中 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="removeAbandoned" value="true" />&ndash;&gt;-->
        <!--&lt;!&ndash; 数据库连接过多长时间不用将被视为被遗弃而收回连接池中 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="removeAbandonedTimeout" value="120" />&ndash;&gt;-->
        <!--&lt;!&ndash; #连接的超时时间，默认为半小时。 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="${Storejdbc.minEvictableIdleTimeMillis}"/>-->
        <!--&lt;!&ndash;# 失效检查线程运行时间间隔，要小于MySQL默认&ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="40000"/>-->
        <!--&lt;!&ndash;# 检查连接是否有效&ndash;&gt;-->
        <!--<property name="testWhileIdle" value="true"/>-->
        <!--&lt;!&ndash;# 检查连接有效性的SQL语句&ndash;&gt;-->
        <!--<property name="validationQuery" value="SELECT 1 FROM dual"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash;测试数据源&ndash;&gt;-->
    <!--<bean id="test" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">-->
        <!--<property name="driverClassName" value="${testjdbc.driver}"/>-->
        <!--<property name="url" value="${testjdbc.url}"/>-->
        <!--<property name="username" value="${testjdbc.username}"/>-->
        <!--<property name="password" value="${testjdbc.password}"/>-->
        <!--&lt;!&ndash; 连接池启动时的初始值 &ndash;&gt;-->
        <!--<property name="initialSize" value="${testjdbc.initialSize}"/>-->
        <!--&lt;!&ndash; 连接池的最大值 &ndash;&gt;-->
        <!--<property name="maxActive" value="${testjdbc.maxActive}"/>-->
        <!--&lt;!&ndash; 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 &ndash;&gt;-->
        <!--<property name="maxIdle" value="${testjdbc.maxIdle}"/>-->
        <!--&lt;!&ndash; 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 &ndash;&gt;-->
        <!--<property name="minIdle" value="${testjdbc.minIdle}"/>-->
        <!--&lt;!&ndash; 最大建立连接等待时间。如果超过此时间将接到异常。设为－1表示无限制 &ndash;&gt;-->
        <!--<property name="maxWait" value="${testjdbc.maxWait}"/>-->
        <!--&lt;!&ndash;#给出一条简单的sql语句进行验证 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="validationQuery" value="select getdate()" />&ndash;&gt;-->
        <!--<property name="defaultAutoCommit" value="${testjdbc.defaultAutoCommit}"/>-->
        <!--&lt;!&ndash; 回收被遗弃的（一般是忘了释放的）数据库连接到连接池中 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="removeAbandoned" value="true" />&ndash;&gt;-->
        <!--&lt;!&ndash; 数据库连接过多长时间不用将被视为被遗弃而收回连接池中 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="removeAbandonedTimeout" value="120" />&ndash;&gt;-->
        <!--&lt;!&ndash; #连接的超时时间，默认为半小时。 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="${testjdbc.minEvictableIdleTimeMillis}"/>-->
        <!--&lt;!&ndash;# 失效检查线程运行时间间隔，要小于MySQL默认&ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="40000"/>-->
        <!--&lt;!&ndash;# 检查连接是否有效&ndash;&gt;-->
        <!--<property name="testWhileIdle" value="true"/>-->
        <!--&lt;!&ndash;# 检查连接有效性的SQL语句&ndash;&gt;-->
        <!--<property name="validationQuery" value="SELECT 1 FROM dual"/>-->
    <!--</bean>-->


    <!--数据源切换实现类-->
    <!--<bean id="dbSwitchService" class="test.learn.dbswitch.DbSwitchServiceImpl">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="00030002" value-ref="ngwf_tj_sit" />
                <entry key="00030016" value-ref="ngwf_yn_sit" />
                <entry key="store" value-ref="store" />
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSource" />
    </bean>-->

    <!--扫描spring注解管理的类-->
    <context:component-scan base-package="test"/>
    
    <!--开启注解-->
    <tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager"/>
    
    <!--task-->
    <!--<task:scheduled-tasks>
        <task:scheduled ref="autoSendTask" method="autoSend" cron="*/5 * * * * ?"/>
    </task:scheduled-tasks>-->

    <!--aop配置-->
    <aop:aspectj-autoproxy/>

    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5"/>
        <property name="maxPoolSize" value="10"/>
        <property name="queueCapacity" value="25"/>
    </bean>
</beans>